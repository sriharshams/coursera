demo()
getwd()
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3456)
table(trainIndicator)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator==1, ]
testSpam <- spam[trainIndicator==0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+1))
hCluster <- hclust(dist(t(trinSpam[, 1:57])))
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
plot(hClusterUpdated)
plot(hClusterUpdated)
plot(hClusterUpdated)
hClusterUpdated <- hclust(dist(t(log20(trainSpam[, 1:55]))))
hClusterUpdated <- hclust(dist(t(log10(trainSpam[, 1:55]))))
hClusterUpdated <- hclust(dist(t(log10(trainSpam[, 1:55]+1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(triainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmfit, costFunction, 2)$delta[2]
}
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmfit, costFunction, 2)$delta[2]
}
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictionSpam <- rep("nonspam", dim(testSpam)[1])
predictiedSpam[predictionModel$fitted >0.5] = "spam"
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictionSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted >0.5] = "spam"
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted >0.5] = "spam"
table(predictedSpam, testSpam$type)
table(predictedSpam, testSpam$type)
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted >0.5] = "spam"
table(predictedSpam, testSpam$type)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted >0.5] = "spam"
table(predictedSpam, testSpam$type)
install.packages("gridExtra")
install.packages("R.utils")
length(unique(storm$EVTYPE))
storm <- read.csv(bzfile("data/repdata-data-StormData.csv.bz2"))
getwd()
setwd("/learning/coursera/data_science/reproducible-research/week4")
storm <- read.csv(bzfile("data/repdata-data-StormData.csv.bz2"))
length(unique(storm$EVTYPE))
event_types <- tolower(storm$EVTYPE)
event_types <- gsub("[[:blank:][:punct:]+]", " ", event_types)
length(unique(event_types))
storm$EVTYPE <- event_types
library(plyr)
library(ggplot2) # for plots
library(grid) # for grids
library(gridExtra) # for advanced plots
library(scales) # for plot scaling
library(R.utils)
casualties <- ddply(storm, .(EVTYPE), summarize,
fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
fatal_events <- head(casualties[order(casualties$fatalities, decreasing = T), ], 10)
injury_events <- head(casualties[order(casualties$injuries, decreasing = T), ], 10)
fatal_events[, c("EVTYPE", "fatalities")]
injury_events[, c("EVTYPE", "injuries")]
exp_transform <- function(e) {
# h -> hundred, k -> thousand, m -> million, b -> billion
if (e %in% c('h', 'H'))
return(2)
else if (e %in% c('k', 'K'))
return(3)
else if (e %in% c('m', 'M'))
return(6)
else if (e %in% c('b', 'B'))
return(9)
else if (!is.na(as.numeric(e))) # if a digit
return(as.numeric(e))
else if (e %in% c('', '-', '?', '+'))
return(0)
else {
stop("Invalid exponent value.")
}
}
prop_dmg_exp <- sapply(storm$PROPDMGEXP, FUN=exp_transform)
storm$prop_dmg <- storm$PROPDMG * (10 ** prop_dmg_exp)
crop_dmg_exp <- sapply(storm$CROPDMGEXP, FUN=exp_transform)
storm$crop_dmg <- storm$CROPDMG * (10 ** crop_dmg_exp)
econ_loss <- ddply(storm, .(EVTYPE), summarize,
prop_dmg = sum(prop_dmg),
crop_dmg = sum(crop_dmg))
econ_loss <- econ_loss[(econ_loss$prop_dmg > 0 | econ_loss$crop_dmg > 0), ]
prop_dmg_events <- head(econ_loss[order(econ_loss$prop_dmg, decreasing = T), ], 10)
crop_dmg_events <- head(econ_loss[order(econ_loss$crop_dmg, decreasing = T), ], 10)
prop_dmg_events[, c("EVTYPE", "prop_dmg")]
crop_dmg_events[, c("EVTYPE", "crop_dmg")]
p1 <- ggplot(data=fatal_events,
aes(x=reorder(EVTYPE, fatalities), y=fatalities, fill=fatalities)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of fatalities") +
xlab("Event type") +
theme(legend.position="none")
p2 <- ggplot(data=injury_events,
aes(x=reorder(EVTYPE, injuries), y=injuries, fill=injuries)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of injuries") +
xlab("Event type") +
theme(legend.position="none")
grid.arrange(p1, p2, main="Top deadly weather events in the US (1950-2011)")
p1
p2
grid.arrange(p1, p2, ncol=2, main="Top deadly weather events in the US (1950-2011)")
grid.arrange(p1, p2, ncol = 2) #, main="Top deadly weather events in the US (1950-2011)")
grid.arrange(p1, p2, ncol = 2, main="Top deadly weather events in the US 1950-2011")
grid.arrange(p1, p2, ncol = 2, main = "Top deadly weather events in the US 1950-2011")
?grid.arrange
grid.arrange(p1, p2, ncol = 2, top = "Top deadly weather events in the US 1950-2011")
p1 <- ggplot(data=fatal_events,
aes(x=reorder(EVTYPE, fatalities), y=fatalities, fill=fatalities, col='red')) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of fatalities") +
xlab("Event type") +
theme(legend.position="none")
grid.arrange(p1, p2, ncol = 2, top = "Top deadly weather events in the US 1950-2011")
